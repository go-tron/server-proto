// source: base.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.Action', null, global);
goog.exportSymbol('proto.AppPage', null, global);
goog.exportSymbol('proto.ChatType', null, global);
goog.exportSymbol('proto.CompetitionStatus', null, global);
goog.exportSymbol('proto.Deck', null, global);
goog.exportSymbol('proto.EndTag', null, global);
goog.exportSymbol('proto.Game', null, global);
goog.exportSymbol('proto.GameCategory', null, global);
goog.exportSymbol('proto.GameType', null, global);
goog.exportSymbol('proto.Item', null, global);
goog.exportSymbol('proto.PromoteType', null, global);
goog.exportSymbol('proto.Round', null, global);
goog.exportSymbol('proto.Table', null, global);
goog.exportSymbol('proto.TableStatus', null, global);
goog.exportSymbol('proto.User', null, global);
goog.exportSymbol('proto.UserCards', null, global);
goog.exportSymbol('proto.UserDeckEnd', null, global);
goog.exportSymbol('proto.UserTableEnd', null, global);
goog.exportSymbol('proto.UserVote', null, global);
goog.exportSymbol('proto.VoteState', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UserCards = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UserCards, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.UserCards.displayName = 'proto.UserCards';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UserDeckEnd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UserDeckEnd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.UserDeckEnd.displayName = 'proto.UserDeckEnd';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UserVote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UserVote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.UserVote.displayName = 'proto.UserVote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Deck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Deck.repeatedFields_, null);
};
goog.inherits(proto.Deck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Deck.displayName = 'proto.Deck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UserTableEnd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UserTableEnd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.UserTableEnd.displayName = 'proto.UserTableEnd';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Item = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Item, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Item.displayName = 'proto.Item';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.User.repeatedFields_, null);
};
goog.inherits(proto.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.User.displayName = 'proto.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Game = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Game, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Game.displayName = 'proto.Game';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Table = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Table.repeatedFields_, null);
};
goog.inherits(proto.Table, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Table.displayName = 'proto.Table';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Round = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Round.repeatedFields_, null);
};
goog.inherits(proto.Round, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Round.displayName = 'proto.Round';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UserCards.prototype.toObject = function(opt_includeInstance) {
  return proto.UserCards.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UserCards} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserCards.toObject = function(includeInstance, msg) {
  var f, obj = {
    seat: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cards: msg.getCards_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UserCards}
 */
proto.UserCards.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UserCards;
  return proto.UserCards.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UserCards} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UserCards}
 */
proto.UserCards.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeat(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UserCards.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UserCards.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UserCards} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserCards.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeat();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCards_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint32 Seat = 1;
 * @return {number}
 */
proto.UserCards.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.UserCards} returns this
 */
proto.UserCards.prototype.setSeat = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes Cards = 2;
 * @return {!(string|Uint8Array)}
 */
proto.UserCards.prototype.getCards = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes Cards = 2;
 * This is a type-conversion wrapper around `getCards()`
 * @return {string}
 */
proto.UserCards.prototype.getCards_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCards()));
};


/**
 * optional bytes Cards = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCards()`
 * @return {!Uint8Array}
 */
proto.UserCards.prototype.getCards_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCards()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.UserCards} returns this
 */
proto.UserCards.prototype.setCards = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UserDeckEnd.prototype.toObject = function(opt_includeInstance) {
  return proto.UserDeckEnd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UserDeckEnd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserDeckEnd.toObject = function(includeInstance, msg) {
  var f, obj = {
    seat: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deckscore: jspb.Message.getFieldWithDefault(msg, 2, 0),
    score: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cards: msg.getCards_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UserDeckEnd}
 */
proto.UserDeckEnd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UserDeckEnd;
  return proto.UserDeckEnd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UserDeckEnd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UserDeckEnd}
 */
proto.UserDeckEnd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeckscore(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UserDeckEnd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UserDeckEnd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UserDeckEnd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserDeckEnd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeat();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDeckscore();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional uint32 Seat = 1;
 * @return {number}
 */
proto.UserDeckEnd.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.UserDeckEnd} returns this
 */
proto.UserDeckEnd.prototype.setSeat = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 DeckScore = 2;
 * @return {number}
 */
proto.UserDeckEnd.prototype.getDeckscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.UserDeckEnd} returns this
 */
proto.UserDeckEnd.prototype.setDeckscore = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 Score = 3;
 * @return {number}
 */
proto.UserDeckEnd.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.UserDeckEnd} returns this
 */
proto.UserDeckEnd.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes Cards = 4;
 * @return {!(string|Uint8Array)}
 */
proto.UserDeckEnd.prototype.getCards = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes Cards = 4;
 * This is a type-conversion wrapper around `getCards()`
 * @return {string}
 */
proto.UserDeckEnd.prototype.getCards_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCards()));
};


/**
 * optional bytes Cards = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCards()`
 * @return {!Uint8Array}
 */
proto.UserDeckEnd.prototype.getCards_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCards()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.UserDeckEnd} returns this
 */
proto.UserDeckEnd.prototype.setCards = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.UserDeckEnd} returns this
 */
proto.UserDeckEnd.prototype.clearCards = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.UserDeckEnd.prototype.hasCards = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UserVote.prototype.toObject = function(opt_includeInstance) {
  return proto.UserVote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UserVote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserVote.toObject = function(includeInstance, msg) {
  var f, obj = {
    seat: jspb.Message.getFieldWithDefault(msg, 1, 0),
    votestate: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UserVote}
 */
proto.UserVote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UserVote;
  return proto.UserVote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UserVote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UserVote}
 */
proto.UserVote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeat(value);
      break;
    case 2:
      var value = /** @type {!proto.VoteState} */ (reader.readEnum());
      msg.setVotestate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UserVote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UserVote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UserVote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserVote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeat();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getVotestate();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional uint32 Seat = 1;
 * @return {number}
 */
proto.UserVote.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.UserVote} returns this
 */
proto.UserVote.prototype.setSeat = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional VoteState VoteState = 2;
 * @return {!proto.VoteState}
 */
proto.UserVote.prototype.getVotestate = function() {
  return /** @type {!proto.VoteState} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.VoteState} value
 * @return {!proto.UserVote} returns this
 */
proto.UserVote.prototype.setVotestate = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Deck.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Deck.prototype.toObject = function(opt_includeInstance) {
  return proto.Deck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Deck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Deck.toObject = function(includeInstance, msg) {
  var f, obj = {
    deckno: jspb.Message.getFieldWithDefault(msg, 1, 0),
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.UserDeckEnd.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Deck}
 */
proto.Deck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Deck;
  return proto.Deck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Deck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Deck}
 */
proto.Deck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeckno(value);
      break;
    case 2:
      var value = new proto.UserDeckEnd;
      reader.readMessage(value,proto.UserDeckEnd.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Deck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Deck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Deck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Deck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeckno();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.UserDeckEnd.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 DeckNo = 1;
 * @return {number}
 */
proto.Deck.prototype.getDeckno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Deck} returns this
 */
proto.Deck.prototype.setDeckno = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated UserDeckEnd Users = 2;
 * @return {!Array<!proto.UserDeckEnd>}
 */
proto.Deck.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.UserDeckEnd>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.UserDeckEnd, 2));
};


/**
 * @param {!Array<!proto.UserDeckEnd>} value
 * @return {!proto.Deck} returns this
*/
proto.Deck.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.UserDeckEnd=} opt_value
 * @param {number=} opt_index
 * @return {!proto.UserDeckEnd}
 */
proto.Deck.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.UserDeckEnd, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Deck} returns this
 */
proto.Deck.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UserTableEnd.prototype.toObject = function(opt_includeInstance) {
  return proto.UserTableEnd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UserTableEnd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserTableEnd.toObject = function(includeInstance, msg) {
  var f, obj = {
    seat: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userno: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nickname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    avatar: jspb.Message.getFieldWithDefault(msg, 4, ""),
    rate: jspb.Message.getFieldWithDefault(msg, 5, 0),
    basescore: jspb.Message.getFieldWithDefault(msg, 6, 0),
    score: jspb.Message.getFieldWithDefault(msg, 7, 0),
    landlord: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    winner: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    owner: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    tag: jspb.Message.getFieldWithDefault(msg, 11, 0),
    cards: msg.getCards_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UserTableEnd}
 */
proto.UserTableEnd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UserTableEnd;
  return proto.UserTableEnd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UserTableEnd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UserTableEnd}
 */
proto.UserTableEnd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeat(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserno(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatar(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRate(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBasescore(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLandlord(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWinner(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOwner(value);
      break;
    case 11:
      var value = /** @type {!proto.EndTag} */ (reader.readEnum());
      msg.setTag(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UserTableEnd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UserTableEnd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UserTableEnd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserTableEnd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeat();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getUserno();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAvatar();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRate();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getBasescore();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getLandlord();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getWinner();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getOwner();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getTag();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getCards_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
};


/**
 * optional uint32 Seat = 1;
 * @return {number}
 */
proto.UserTableEnd.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.UserTableEnd} returns this
 */
proto.UserTableEnd.prototype.setSeat = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string UserNo = 2;
 * @return {string}
 */
proto.UserTableEnd.prototype.getUserno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.UserTableEnd} returns this
 */
proto.UserTableEnd.prototype.setUserno = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Nickname = 3;
 * @return {string}
 */
proto.UserTableEnd.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.UserTableEnd} returns this
 */
proto.UserTableEnd.prototype.setNickname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Avatar = 4;
 * @return {string}
 */
proto.UserTableEnd.prototype.getAvatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.UserTableEnd} returns this
 */
proto.UserTableEnd.prototype.setAvatar = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 Rate = 5;
 * @return {number}
 */
proto.UserTableEnd.prototype.getRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.UserTableEnd} returns this
 */
proto.UserTableEnd.prototype.setRate = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 BaseScore = 6;
 * @return {number}
 */
proto.UserTableEnd.prototype.getBasescore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.UserTableEnd} returns this
 */
proto.UserTableEnd.prototype.setBasescore = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 Score = 7;
 * @return {number}
 */
proto.UserTableEnd.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.UserTableEnd} returns this
 */
proto.UserTableEnd.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool Landlord = 8;
 * @return {boolean}
 */
proto.UserTableEnd.prototype.getLandlord = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.UserTableEnd} returns this
 */
proto.UserTableEnd.prototype.setLandlord = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool Winner = 9;
 * @return {boolean}
 */
proto.UserTableEnd.prototype.getWinner = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.UserTableEnd} returns this
 */
proto.UserTableEnd.prototype.setWinner = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool Owner = 10;
 * @return {boolean}
 */
proto.UserTableEnd.prototype.getOwner = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.UserTableEnd} returns this
 */
proto.UserTableEnd.prototype.setOwner = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional EndTag Tag = 11;
 * @return {!proto.EndTag}
 */
proto.UserTableEnd.prototype.getTag = function() {
  return /** @type {!proto.EndTag} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.EndTag} value
 * @return {!proto.UserTableEnd} returns this
 */
proto.UserTableEnd.prototype.setTag = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional bytes Cards = 12;
 * @return {!(string|Uint8Array)}
 */
proto.UserTableEnd.prototype.getCards = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes Cards = 12;
 * This is a type-conversion wrapper around `getCards()`
 * @return {string}
 */
proto.UserTableEnd.prototype.getCards_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCards()));
};


/**
 * optional bytes Cards = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCards()`
 * @return {!Uint8Array}
 */
proto.UserTableEnd.prototype.getCards_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCards()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.UserTableEnd} returns this
 */
proto.UserTableEnd.prototype.setCards = function(value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Item.prototype.toObject = function(opt_includeInstance) {
  return proto.Item.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Item} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Item.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    quantity: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Item}
 */
proto.Item.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Item;
  return proto.Item.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Item}
 */
proto.Item.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setItemid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setQuantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Item.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Item.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Item} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Item.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 ItemId = 1;
 * @return {number}
 */
proto.Item.prototype.getItemid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Item} returns this
 */
proto.Item.prototype.setItemid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 Quantity = 2;
 * @return {number}
 */
proto.Item.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Item} returns this
 */
proto.Item.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.User.repeatedFields_ = [13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.User.prototype.toObject = function(opt_includeInstance) {
  return proto.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userno: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nickname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    avatar: jspb.Message.getFieldWithDefault(msg, 4, ""),
    gender: jspb.Message.getFieldWithDefault(msg, 5, 0),
    seat: jspb.Message.getFieldWithDefault(msg, 6, 0),
    landlord: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    score: jspb.Message.getFieldWithDefault(msg, 8, 0),
    pb_double: jspb.Message.getFieldWithDefault(msg, 9, 0),
    doublecalled: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    cards: msg.getCards_asB64(),
    lastcards: msg.getLastcards_asB64(),
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.Item.toObject, includeInstance),
    online: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    leaved: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    hosted: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),
    owner: jspb.Message.getBooleanFieldWithDefault(msg, 17, false),
    votestate: jspb.Message.getFieldWithDefault(msg, 18, 0),
    ready: jspb.Message.getBooleanFieldWithDefault(msg, 19, false),
    rank: jspb.Message.getFieldWithDefault(msg, 20, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.User}
 */
proto.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.User;
  return proto.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.User}
 */
proto.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserno(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatar(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGender(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeat(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLandlord(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDouble(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDoublecalled(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCards(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLastcards(value);
      break;
    case 13:
      var value = new proto.Item;
      reader.readMessage(value,proto.Item.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnline(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLeaved(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHosted(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOwner(value);
      break;
    case 18:
      var value = /** @type {!proto.VoteState} */ (reader.readEnum());
      msg.setVotestate(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReady(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRank(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserno();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAvatar();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGender();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getSeat();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getLandlord();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getDouble();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getDoublecalled();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getCards_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getLastcards_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.Item.serializeBinaryToWriter
    );
  }
  f = message.getOnline();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getLeaved();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getHosted();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getOwner();
  if (f) {
    writer.writeBool(
      17,
      f
    );
  }
  f = message.getVotestate();
  if (f !== 0.0) {
    writer.writeEnum(
      18,
      f
    );
  }
  f = message.getReady();
  if (f) {
    writer.writeBool(
      19,
      f
    );
  }
  f = message.getRank();
  if (f !== 0) {
    writer.writeUint32(
      20,
      f
    );
  }
};


/**
 * optional string UserId = 1;
 * @return {string}
 */
proto.User.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string UserNo = 2;
 * @return {string}
 */
proto.User.prototype.getUserno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setUserno = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Nickname = 3;
 * @return {string}
 */
proto.User.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setNickname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Avatar = 4;
 * @return {string}
 */
proto.User.prototype.getAvatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setAvatar = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 Gender = 5;
 * @return {number}
 */
proto.User.prototype.getGender = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setGender = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 Seat = 6;
 * @return {number}
 */
proto.User.prototype.getSeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setSeat = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool Landlord = 7;
 * @return {boolean}
 */
proto.User.prototype.getLandlord = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setLandlord = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional int32 Score = 8;
 * @return {number}
 */
proto.User.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 Double = 9;
 * @return {number}
 */
proto.User.prototype.getDouble = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setDouble = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional bool DoubleCalled = 10;
 * @return {boolean}
 */
proto.User.prototype.getDoublecalled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setDoublecalled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bytes Cards = 11;
 * @return {!(string|Uint8Array)}
 */
proto.User.prototype.getCards = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes Cards = 11;
 * This is a type-conversion wrapper around `getCards()`
 * @return {string}
 */
proto.User.prototype.getCards_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCards()));
};


/**
 * optional bytes Cards = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCards()`
 * @return {!Uint8Array}
 */
proto.User.prototype.getCards_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCards()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setCards = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional bytes LastCards = 12;
 * @return {!(string|Uint8Array)}
 */
proto.User.prototype.getLastcards = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes LastCards = 12;
 * This is a type-conversion wrapper around `getLastcards()`
 * @return {string}
 */
proto.User.prototype.getLastcards_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLastcards()));
};


/**
 * optional bytes LastCards = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastcards()`
 * @return {!Uint8Array}
 */
proto.User.prototype.getLastcards_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLastcards()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setLastcards = function(value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};


/**
 * repeated Item Items = 13;
 * @return {!Array<!proto.Item>}
 */
proto.User.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Item, 13));
};


/**
 * @param {!Array<!proto.Item>} value
 * @return {!proto.User} returns this
*/
proto.User.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Item}
 */
proto.User.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.Item, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.User} returns this
 */
proto.User.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};


/**
 * optional bool Online = 14;
 * @return {boolean}
 */
proto.User.prototype.getOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setOnline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool Leaved = 15;
 * @return {boolean}
 */
proto.User.prototype.getLeaved = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setLeaved = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional bool Hosted = 16;
 * @return {boolean}
 */
proto.User.prototype.getHosted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setHosted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};


/**
 * optional bool Owner = 17;
 * @return {boolean}
 */
proto.User.prototype.getOwner = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 17, false));
};


/**
 * @param {boolean} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setOwner = function(value) {
  return jspb.Message.setProto3BooleanField(this, 17, value);
};


/**
 * optional VoteState VoteState = 18;
 * @return {!proto.VoteState}
 */
proto.User.prototype.getVotestate = function() {
  return /** @type {!proto.VoteState} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {!proto.VoteState} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setVotestate = function(value) {
  return jspb.Message.setProto3EnumField(this, 18, value);
};


/**
 * optional bool Ready = 19;
 * @return {boolean}
 */
proto.User.prototype.getReady = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 19, false));
};


/**
 * @param {boolean} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setReady = function(value) {
  return jspb.Message.setProto3BooleanField(this, 19, value);
};


/**
 * optional uint32 Rank = 20;
 * @return {number}
 */
proto.User.prototype.getRank = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.User} returns this
 */
proto.User.prototype.setRank = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Game.prototype.toObject = function(opt_includeInstance) {
  return proto.Game.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Game} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gameconfigid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gametype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    gamecategory: jspb.Message.getFieldWithDefault(msg, 4, 0),
    title: jspb.Message.getFieldWithDefault(msg, 5, ""),
    image: jspb.Message.getFieldWithDefault(msg, 6, ""),
    rounds: jspb.Message.getFieldWithDefault(msg, 7, 0),
    currentround: jspb.Message.getFieldWithDefault(msg, 8, 0),
    people: jspb.Message.getFieldWithDefault(msg, 9, 0),
    currentpeople: jspb.Message.getFieldWithDefault(msg, 10, 0),
    gameconfig: jspb.Message.getFieldWithDefault(msg, 11, ""),
    defaultvotetimeout: jspb.Message.getFieldWithDefault(msg, 12, 0),
    withbomb: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    withdouble: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    promotepeople: jspb.Message.getFieldWithDefault(msg, 15, 0),
    initialscore: jspb.Message.getFieldWithDefault(msg, 16, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Game}
 */
proto.Game.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Game;
  return proto.Game.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Game} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Game}
 */
proto.Game.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGameconfigid(value);
      break;
    case 3:
      var value = /** @type {!proto.GameType} */ (reader.readEnum());
      msg.setGametype(value);
      break;
    case 4:
      var value = /** @type {!proto.GameCategory} */ (reader.readEnum());
      msg.setGamecategory(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setImage(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRounds(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurrentround(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPeople(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurrentpeople(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameconfig(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDefaultvotetimeout(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithbomb(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithdouble(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPromotepeople(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInitialscore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Game.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Game.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Game} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Game.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGameconfigid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getGametype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getGamecategory();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getImage();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getRounds();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getCurrentround();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getPeople();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getCurrentpeople();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getGameconfig();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getDefaultvotetimeout();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = message.getWithbomb();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getWithdouble();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getPromotepeople();
  if (f !== 0) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = message.getInitialscore();
  if (f !== 0) {
    writer.writeUint32(
      16,
      f
    );
  }
};


/**
 * optional string GameId = 1;
 * @return {string}
 */
proto.Game.prototype.getGameid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Game} returns this
 */
proto.Game.prototype.setGameid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 GameConfigId = 2;
 * @return {number}
 */
proto.Game.prototype.getGameconfigid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Game} returns this
 */
proto.Game.prototype.setGameconfigid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional GameType GameType = 3;
 * @return {!proto.GameType}
 */
proto.Game.prototype.getGametype = function() {
  return /** @type {!proto.GameType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.GameType} value
 * @return {!proto.Game} returns this
 */
proto.Game.prototype.setGametype = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional GameCategory GameCategory = 4;
 * @return {!proto.GameCategory}
 */
proto.Game.prototype.getGamecategory = function() {
  return /** @type {!proto.GameCategory} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.GameCategory} value
 * @return {!proto.Game} returns this
 */
proto.Game.prototype.setGamecategory = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string Title = 5;
 * @return {string}
 */
proto.Game.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Game} returns this
 */
proto.Game.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string Image = 6;
 * @return {string}
 */
proto.Game.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.Game} returns this
 */
proto.Game.prototype.setImage = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint32 Rounds = 7;
 * @return {number}
 */
proto.Game.prototype.getRounds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Game} returns this
 */
proto.Game.prototype.setRounds = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 CurrentRound = 8;
 * @return {number}
 */
proto.Game.prototype.getCurrentround = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.Game} returns this
 */
proto.Game.prototype.setCurrentround = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 People = 9;
 * @return {number}
 */
proto.Game.prototype.getPeople = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.Game} returns this
 */
proto.Game.prototype.setPeople = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint32 CurrentPeople = 10;
 * @return {number}
 */
proto.Game.prototype.getCurrentpeople = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.Game} returns this
 */
proto.Game.prototype.setCurrentpeople = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string GameConfig = 11;
 * @return {string}
 */
proto.Game.prototype.getGameconfig = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.Game} returns this
 */
proto.Game.prototype.setGameconfig = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional uint32 DefaultVoteTimeout = 12;
 * @return {number}
 */
proto.Game.prototype.getDefaultvotetimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.Game} returns this
 */
proto.Game.prototype.setDefaultvotetimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional bool WithBomb = 13;
 * @return {boolean}
 */
proto.Game.prototype.getWithbomb = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Game} returns this
 */
proto.Game.prototype.setWithbomb = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool WithDouble = 14;
 * @return {boolean}
 */
proto.Game.prototype.getWithdouble = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Game} returns this
 */
proto.Game.prototype.setWithdouble = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional uint32 PromotePeople = 15;
 * @return {number}
 */
proto.Game.prototype.getPromotepeople = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.Game} returns this
 */
proto.Game.prototype.setPromotepeople = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional uint32 InitialScore = 16;
 * @return {number}
 */
proto.Game.prototype.getInitialscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.Game} returns this
 */
proto.Game.prototype.setInitialscore = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Table.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Table.prototype.toObject = function(opt_includeInstance) {
  return proto.Table.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Table} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Table.toObject = function(includeInstance, msg) {
  var f, obj = {
    game: (f = msg.getGame()) && proto.Game.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.User.toObject, includeInstance),
    tableid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    tableno: jspb.Message.getFieldWithDefault(msg, 5, ""),
    decks: jspb.Message.getFieldWithDefault(msg, 6, 0),
    currentdeck: jspb.Message.getFieldWithDefault(msg, 7, 0),
    basescore: jspb.Message.getFieldWithDefault(msg, 8, 0),
    rate: jspb.Message.getFieldWithDefault(msg, 9, 0),
    holecards: msg.getHolecards_asB64(),
    playedcards: msg.getPlayedcards_asB64(),
    currentseat: jspb.Message.getFieldWithDefault(msg, 12, 0),
    currentaction: jspb.Message.getFieldWithDefault(msg, 13, 0),
    currenttimeout: jspb.Message.getFieldWithDefault(msg, 14, 0),
    votetimeout: jspb.Message.getFieldWithDefault(msg, 15, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Table}
 */
proto.Table.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Table;
  return proto.Table.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Table} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Table}
 */
proto.Table.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Game;
      reader.readMessage(value,proto.Game.deserializeBinaryFromReader);
      msg.setGame(value);
      break;
    case 2:
      var value = /** @type {!proto.TableStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = new proto.User;
      reader.readMessage(value,proto.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableno(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDecks(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurrentdeck(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBasescore(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRate(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHolecards(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPlayedcards(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurrentseat(value);
      break;
    case 13:
      var value = /** @type {!proto.Action} */ (reader.readEnum());
      msg.setCurrentaction(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurrenttimeout(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVotetimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Table.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Table.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Table} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Table.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGame();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Game.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.User.serializeBinaryToWriter
    );
  }
  f = message.getTableid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTableno();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDecks();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getCurrentdeck();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getBasescore();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getRate();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getHolecards_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getPlayedcards_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getCurrentseat();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = message.getCurrentaction();
  if (f !== 0.0) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getCurrenttimeout();
  if (f !== 0) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeUint32(
      15,
      f
    );
  }
};


/**
 * optional Game Game = 1;
 * @return {?proto.Game}
 */
proto.Table.prototype.getGame = function() {
  return /** @type{?proto.Game} */ (
    jspb.Message.getWrapperField(this, proto.Game, 1));
};


/**
 * @param {?proto.Game|undefined} value
 * @return {!proto.Table} returns this
*/
proto.Table.prototype.setGame = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Table} returns this
 */
proto.Table.prototype.clearGame = function() {
  return this.setGame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Table.prototype.hasGame = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TableStatus Status = 2;
 * @return {!proto.TableStatus}
 */
proto.Table.prototype.getStatus = function() {
  return /** @type {!proto.TableStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.TableStatus} value
 * @return {!proto.Table} returns this
 */
proto.Table.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated User Users = 3;
 * @return {!Array<!proto.User>}
 */
proto.Table.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.User, 3));
};


/**
 * @param {!Array<!proto.User>} value
 * @return {!proto.Table} returns this
*/
proto.Table.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.User}
 */
proto.Table.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Table} returns this
 */
proto.Table.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};


/**
 * optional string TableId = 4;
 * @return {string}
 */
proto.Table.prototype.getTableid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Table} returns this
 */
proto.Table.prototype.setTableid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string TableNo = 5;
 * @return {string}
 */
proto.Table.prototype.getTableno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Table} returns this
 */
proto.Table.prototype.setTableno = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint32 Decks = 6;
 * @return {number}
 */
proto.Table.prototype.getDecks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Table} returns this
 */
proto.Table.prototype.setDecks = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 CurrentDeck = 7;
 * @return {number}
 */
proto.Table.prototype.getCurrentdeck = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Table} returns this
 */
proto.Table.prototype.setCurrentdeck = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 BaseScore = 8;
 * @return {number}
 */
proto.Table.prototype.getBasescore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.Table} returns this
 */
proto.Table.prototype.setBasescore = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 Rate = 9;
 * @return {number}
 */
proto.Table.prototype.getRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.Table} returns this
 */
proto.Table.prototype.setRate = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional bytes HoleCards = 10;
 * @return {!(string|Uint8Array)}
 */
proto.Table.prototype.getHolecards = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes HoleCards = 10;
 * This is a type-conversion wrapper around `getHolecards()`
 * @return {string}
 */
proto.Table.prototype.getHolecards_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHolecards()));
};


/**
 * optional bytes HoleCards = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHolecards()`
 * @return {!Uint8Array}
 */
proto.Table.prototype.getHolecards_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHolecards()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Table} returns this
 */
proto.Table.prototype.setHolecards = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional bytes PlayedCards = 11;
 * @return {!(string|Uint8Array)}
 */
proto.Table.prototype.getPlayedcards = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes PlayedCards = 11;
 * This is a type-conversion wrapper around `getPlayedcards()`
 * @return {string}
 */
proto.Table.prototype.getPlayedcards_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPlayedcards()));
};


/**
 * optional bytes PlayedCards = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPlayedcards()`
 * @return {!Uint8Array}
 */
proto.Table.prototype.getPlayedcards_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPlayedcards()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Table} returns this
 */
proto.Table.prototype.setPlayedcards = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional uint32 CurrentSeat = 12;
 * @return {number}
 */
proto.Table.prototype.getCurrentseat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.Table} returns this
 */
proto.Table.prototype.setCurrentseat = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional Action CurrentAction = 13;
 * @return {!proto.Action}
 */
proto.Table.prototype.getCurrentaction = function() {
  return /** @type {!proto.Action} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {!proto.Action} value
 * @return {!proto.Table} returns this
 */
proto.Table.prototype.setCurrentaction = function(value) {
  return jspb.Message.setProto3EnumField(this, 13, value);
};


/**
 * optional uint32 CurrentTimeout = 14;
 * @return {number}
 */
proto.Table.prototype.getCurrenttimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.Table} returns this
 */
proto.Table.prototype.setCurrenttimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional uint32 VoteTimeout = 15;
 * @return {number}
 */
proto.Table.prototype.getVotetimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.Table} returns this
 */
proto.Table.prototype.setVotetimeout = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Table} returns this
 */
proto.Table.prototype.clearVotetimeout = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Table.prototype.hasVotetimeout = function() {
  return jspb.Message.getField(this, 15) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Round.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Round.prototype.toObject = function(opt_includeInstance) {
  return proto.Round.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Round} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Round.toObject = function(includeInstance, msg) {
  var f, obj = {
    roundno: jspb.Message.getFieldWithDefault(msg, 1, 0),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    subtitle: jspb.Message.getFieldWithDefault(msg, 3, ""),
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.Item.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Round}
 */
proto.Round.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Round;
  return proto.Round.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Round} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Round}
 */
proto.Round.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoundno(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubtitle(value);
      break;
    case 4:
      var value = new proto.Item;
      reader.readMessage(value,proto.Item.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Round.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Round.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Round} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Round.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoundno();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSubtitle();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Item.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 RoundNo = 1;
 * @return {number}
 */
proto.Round.prototype.getRoundno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Round} returns this
 */
proto.Round.prototype.setRoundno = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string Title = 2;
 * @return {string}
 */
proto.Round.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Round} returns this
 */
proto.Round.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Subtitle = 3;
 * @return {string}
 */
proto.Round.prototype.getSubtitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Round} returns this
 */
proto.Round.prototype.setSubtitle = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Item Items = 4;
 * @return {!Array<!proto.Item>}
 */
proto.Round.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Item, 4));
};


/**
 * @param {!Array<!proto.Item>} value
 * @return {!proto.Round} returns this
*/
proto.Round.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Item}
 */
proto.Round.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Item, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Round} returns this
 */
proto.Round.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};


/**
 * @enum {number}
 */
proto.GameType = {
  GAMETYPEUNSPECIFIED: 0,
  GAMETYPEDIGHOLE: 1,
  GAMETYPELANDLORD: 2,
  GAMETYPEMAHJONG: 3
};

/**
 * @enum {number}
 */
proto.GameCategory = {
  GAMECATEGORYUNSPECIFIED: 0,
  GAMECATEGORYGOLD: 1,
  GAMECATEGORYCOMPETITION: 2,
  GAMECATEGORYPRIVATE: 3
};

/**
 * @enum {number}
 */
proto.TableStatus = {
  TABLESTATUSUNSPECIFIED: 0,
  TABLESTATUSMATCHING: 1,
  TABLESTATUSSTARTED: 2,
  TABLESTATUSCALLRATE: 3,
  TABLESTATUSCALLDOUBLE: 4,
  TABLESTATUSPLAYING: 5,
  TABLESTATUSDECKEND: 6,
  TABLESTATUSEND: 7
};

/**
 * @enum {number}
 */
proto.Action = {
  ACTIONUNSPECIFIED: 0,
  ACTIONCALLRATE: 1,
  ACTIONCALLDOUBLE: 2,
  ACTIONPLAY: 3,
  ACTIONFOLLOW: 4,
  ACTIONCANTFOLLOW: 5
};

/**
 * @enum {number}
 */
proto.EndTag = {
  ENDTAGUNSPECIFIED: 0,
  ENDTAGREACHMAX: 1,
  ENDTAGGOBROKE: 2
};

/**
 * @enum {number}
 */
proto.ChatType = {
  CHATTYPEUNSPECIFIED: 0,
  CHATTYPETEXT: 1,
  CHATTYPEEMO: 2,
  CHATTYPEPROP: 3
};

/**
 * @enum {number}
 */
proto.VoteState = {
  VOTESTATEUNSPECIFIED: 0,
  VOTESTATEAWAITING: 1,
  VOTESTATEACCEPT: 2,
  VOTESTATEREJECT: 3
};

/**
 * @enum {number}
 */
proto.PromoteType = {
  PROMOTETYPEUNSPECIFIED: 0,
  PROMOTETYPEPENDING: 1,
  PROMOTETYPESUCCEED: 2,
  PROMOTETYPEFAILED: 3,
  PROMOTETYPEBYE: 4
};

/**
 * @enum {number}
 */
proto.AppPage = {
  APPPAGEUNSPECIFIED: 0,
  APPPAGEHOME: 1,
  APPPAGEGAMEGOLDLIST: 2,
  APPPAGEGAMECOMPETITIONLIST: 3
};

/**
 * @enum {number}
 */
proto.CompetitionStatus = {
  COMPETITIONSTATUSUNSPECIFIED: 0,
  COMPETITIONSTATUSMATCHING: 1,
  COMPETITIONSTATUSPLAYING: 2,
  COMPETITIONSTATUSWAITINGTABLES: 3,
  COMPETITIONSTATUSPROMOTING: 4
};

goog.object.extend(exports, proto);
