syntax = "proto3";

package control_pb;
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "base.proto";

option go_package = "server-proto/pb/control;control_pb";

service Control {
  rpc ClientCmdSrv (ControlMessage) returns (google.protobuf.Empty) {}
  rpc QuitTableSrv (QuitTable) returns (google.protobuf.Empty) {}
  rpc TableEndSrv (TableEnd) returns (google.protobuf.Empty) {}
  rpc CreateTableResultSrv (CreateTableResult) returns (google.protobuf.Empty) {}
}

message ControlMessage {
  uint32 Cmd = 1;
  google.protobuf.Any Content = 2;
  string UserId = 3;
}

message AssignUser {
  bool Robot = 1;
  int64 UserId = 2;
  string UserNo = 3;
  string Nickname = 4; //昵称
  string Avatar = 5; //头像
  uint32 Gender = 6; //性别
  uint32 Seat = 7; //座位号0,1,2 逆时针方向排列
  int32 Score = 8; //分数
  uint32 Rank = 9; //当前排名
}

message TableConfig {
  repeated AssignUser AssignUsers = 1;
  int64 GameId = 2; //游戏ID
  int64 TableId = 3; //牌桌ID
  int64 ForceJoinTime = 4; //强制加入时间
  int64 RoundId = 5; //轮次ID
  string TableNo = 6; //牌桌编号
  GameType GameType = 7; //游戏类型
  GameCategory GameCategory = 8; //游戏类别
  uint32 GameRuleId = 9; //游戏规则ID
  uint32 GameConfigId = 10; //游戏配置ID
  string Title = 11; //游戏标题
  string Image = 12; //游戏图标
  uint32 BaseScore = 13; //底分
  uint32 InitialScore = 14; //初始积分
  uint32 CallRateTimeout = 15; //叫分超时时间
  uint32 CallDoubleTimeout = 16; //叫双倍超时时间
  uint32 PlayTimeout = 17; //打牌超时时间
  uint32 FollowTimeout = 18; //跟牌超时时间
  uint32 CantFollowTimeout = 19; //要不起超时时间
  uint32 People = 20; //参加总人数
  uint32 CurrentPeople = 21; //当前剩余人数
  uint32 Rounds = 22; //游戏总轮次
  uint32 CurrentRound = 23; //游戏当前轮次
  uint32 PromotePeople = 24; //当前轮次晋级人数
  uint32 Decks = 25; //打几副牌
  bool WithBomb = 26; //是否带炸弹
  bool WithDouble = 27; //是否带加倍
  uint32 MaxRate = 28; //最大倍率
  CallRateType CallRateType = 29; //叫分方式
  bool WithHoleRate = 30; //是否计算底牌倍率
}

message CreateTableResult {
  int64 GameId = 1;
  int64 RoundId = 2;
  int64 TableId = 3;
  uint32 GameConfigId = 4;
  GameType GameType = 5; //游戏类型
  GameCategory GameCategory = 6; //游戏类别
}

message CoverRobot {
  uint32 GameConfigId = 1;
  int64 TableId = 2;
}

message AssignTable {
  repeated AssignUser AssignUsers = 1;
  int64 GameId = 2; //游戏ID
  int64 TableId = 3; //牌桌ID
  int64 ForceJoinTime = 4; //强制加入时间
}

message ForceJoinTable {
  int64 GameId = 1;
  int64 TableId = 2;
  int64 ForceJoinTime = 3; //强制加入时间
}

message TableEnd {
  int64 GameId = 1;
  int64 RoundId = 2;
  int64 TableId = 3;
  uint32 GameConfigId = 4;
  GameType GameType = 5; //游戏类型
  GameCategory GameCategory = 6; //游戏类别
}

message QuitTable {
  int64 UserId = 1;
  int64 GameId = 2; //游戏ID
  int64 TableId = 3; //牌桌ID
  uint32 GameConfigId = 4;
  GameType GameType = 5; //游戏类型
  GameCategory GameCategory = 6; //游戏类别
  uint32 Seat = 7; //座位
}

message TimedStart {
  uint32 GameConfigId = 1;
  int64 StartTime = 2;
}

message FullStart {
  uint32 GameConfigId = 1;
}

message Game {
  // @gotags: redis:"gameId"
  int64 GameId = 1;
  // @gotags: redis:"gameTypeId"
  uint32 GameTypeId = 2;
  // @gotags: redis:"gameCategoryId"
  uint32 GameCategoryId = 3;
  // @gotags: redis:"gameConfigId"
  uint32 GameConfigId = 4;
  // @gotags: redis:"gameRuleId"
  uint32 GameRuleId = 5;
  // @gotags: redis:"rounds"
  uint32 Rounds = 6;
  // @gotags: redis:"currentRound"
  uint32 CurrentRound = 7;
  // @gotags: redis:"people"
  uint32 People = 8;
  // @gotags: redis:"currentPeople"
  uint32 CurrentPeople = 9;
  // @gotags: redis:"roundId"
  int64 RoundId = 10;
  // @gotags: redis:"promotePeople"
  uint32 PromotePeople = 11;
  // @gotags: redis:"status"
  uint32 Status = 12;
  // @gotags: redis:"startAt"
  int64 StartAt = 13;
  // @gotags: redis:"endAt"
  int64 EndAt = 14;
  // @gotags: redis:"config"
  string Config = 15;
}

message GameSettle {
  int64 StartTime = 1;
  Game Game = 2;
  repeated UserRank RankList = 3;
}

message UserRank {
  int64 UserId = 1;
  int64 Score = 2;
  int64 Rank = 3;
  bool Promote = 4;
}

message UserGameEnd {
  Game Game = 1;
  UserRank User = 2;
}