// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: gameCluster.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GameCluster_NodeListSrv_FullMethodName   = "/game.server.GameCluster/NodeListSrv"
	GameCluster_NodeOpenSrv_FullMethodName   = "/game.server.GameCluster/NodeOpenSrv"
	GameCluster_NodeCloseSrv_FullMethodName  = "/game.server.GameCluster/NodeCloseSrv"
	GameCluster_TableCountSrv_FullMethodName = "/game.server.GameCluster/TableCountSrv"
	GameCluster_TableListSrv_FullMethodName  = "/game.server.GameCluster/TableListSrv"
	GameCluster_TableGetSrv_FullMethodName   = "/game.server.GameCluster/TableGetSrv"
	GameCluster_TableCloseSrv_FullMethodName = "/game.server.GameCluster/TableCloseSrv"
)

// GameClusterClient is the client API for GameCluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameClusterClient interface {
	NodeListSrv(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeList, error)
	NodeOpenSrv(ctx context.Context, in *NodeNameReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NodeCloseSrv(ctx context.Context, in *NodeNameReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TableCountSrv(ctx context.Context, in *NodeNameReq, opts ...grpc.CallOption) (*TableCount, error)
	TableListSrv(ctx context.Context, in *NodeNameReq, opts ...grpc.CallOption) (*TableList, error)
	TableGetSrv(ctx context.Context, in *TableIdReq, opts ...grpc.CallOption) (*TableVO, error)
	TableCloseSrv(ctx context.Context, in *TableIdReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type gameClusterClient struct {
	cc grpc.ClientConnInterface
}

func NewGameClusterClient(cc grpc.ClientConnInterface) GameClusterClient {
	return &gameClusterClient{cc}
}

func (c *gameClusterClient) NodeListSrv(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeList, error) {
	out := new(NodeList)
	err := c.cc.Invoke(ctx, GameCluster_NodeListSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClusterClient) NodeOpenSrv(ctx context.Context, in *NodeNameReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GameCluster_NodeOpenSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClusterClient) NodeCloseSrv(ctx context.Context, in *NodeNameReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GameCluster_NodeCloseSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClusterClient) TableCountSrv(ctx context.Context, in *NodeNameReq, opts ...grpc.CallOption) (*TableCount, error) {
	out := new(TableCount)
	err := c.cc.Invoke(ctx, GameCluster_TableCountSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClusterClient) TableListSrv(ctx context.Context, in *NodeNameReq, opts ...grpc.CallOption) (*TableList, error) {
	out := new(TableList)
	err := c.cc.Invoke(ctx, GameCluster_TableListSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClusterClient) TableGetSrv(ctx context.Context, in *TableIdReq, opts ...grpc.CallOption) (*TableVO, error) {
	out := new(TableVO)
	err := c.cc.Invoke(ctx, GameCluster_TableGetSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClusterClient) TableCloseSrv(ctx context.Context, in *TableIdReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GameCluster_TableCloseSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameClusterServer is the server API for GameCluster service.
// All implementations must embed UnimplementedGameClusterServer
// for forward compatibility
type GameClusterServer interface {
	NodeListSrv(context.Context, *emptypb.Empty) (*NodeList, error)
	NodeOpenSrv(context.Context, *NodeNameReq) (*emptypb.Empty, error)
	NodeCloseSrv(context.Context, *NodeNameReq) (*emptypb.Empty, error)
	TableCountSrv(context.Context, *NodeNameReq) (*TableCount, error)
	TableListSrv(context.Context, *NodeNameReq) (*TableList, error)
	TableGetSrv(context.Context, *TableIdReq) (*TableVO, error)
	TableCloseSrv(context.Context, *TableIdReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedGameClusterServer()
}

// UnimplementedGameClusterServer must be embedded to have forward compatible implementations.
type UnimplementedGameClusterServer struct {
}

func (UnimplementedGameClusterServer) NodeListSrv(context.Context, *emptypb.Empty) (*NodeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeListSrv not implemented")
}
func (UnimplementedGameClusterServer) NodeOpenSrv(context.Context, *NodeNameReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeOpenSrv not implemented")
}
func (UnimplementedGameClusterServer) NodeCloseSrv(context.Context, *NodeNameReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeCloseSrv not implemented")
}
func (UnimplementedGameClusterServer) TableCountSrv(context.Context, *NodeNameReq) (*TableCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableCountSrv not implemented")
}
func (UnimplementedGameClusterServer) TableListSrv(context.Context, *NodeNameReq) (*TableList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableListSrv not implemented")
}
func (UnimplementedGameClusterServer) TableGetSrv(context.Context, *TableIdReq) (*TableVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableGetSrv not implemented")
}
func (UnimplementedGameClusterServer) TableCloseSrv(context.Context, *TableIdReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableCloseSrv not implemented")
}
func (UnimplementedGameClusterServer) mustEmbedUnimplementedGameClusterServer() {}

// UnsafeGameClusterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameClusterServer will
// result in compilation errors.
type UnsafeGameClusterServer interface {
	mustEmbedUnimplementedGameClusterServer()
}

func RegisterGameClusterServer(s grpc.ServiceRegistrar, srv GameClusterServer) {
	s.RegisterService(&GameCluster_ServiceDesc, srv)
}

func _GameCluster_NodeListSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameClusterServer).NodeListSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameCluster_NodeListSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameClusterServer).NodeListSrv(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameCluster_NodeOpenSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameClusterServer).NodeOpenSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameCluster_NodeOpenSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameClusterServer).NodeOpenSrv(ctx, req.(*NodeNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameCluster_NodeCloseSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameClusterServer).NodeCloseSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameCluster_NodeCloseSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameClusterServer).NodeCloseSrv(ctx, req.(*NodeNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameCluster_TableCountSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameClusterServer).TableCountSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameCluster_TableCountSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameClusterServer).TableCountSrv(ctx, req.(*NodeNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameCluster_TableListSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameClusterServer).TableListSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameCluster_TableListSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameClusterServer).TableListSrv(ctx, req.(*NodeNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameCluster_TableGetSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameClusterServer).TableGetSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameCluster_TableGetSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameClusterServer).TableGetSrv(ctx, req.(*TableIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameCluster_TableCloseSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameClusterServer).TableCloseSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameCluster_TableCloseSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameClusterServer).TableCloseSrv(ctx, req.(*TableIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GameCluster_ServiceDesc is the grpc.ServiceDesc for GameCluster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameCluster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.server.GameCluster",
	HandlerType: (*GameClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NodeListSrv",
			Handler:    _GameCluster_NodeListSrv_Handler,
		},
		{
			MethodName: "NodeOpenSrv",
			Handler:    _GameCluster_NodeOpenSrv_Handler,
		},
		{
			MethodName: "NodeCloseSrv",
			Handler:    _GameCluster_NodeCloseSrv_Handler,
		},
		{
			MethodName: "TableCountSrv",
			Handler:    _GameCluster_TableCountSrv_Handler,
		},
		{
			MethodName: "TableListSrv",
			Handler:    _GameCluster_TableListSrv_Handler,
		},
		{
			MethodName: "TableGetSrv",
			Handler:    _GameCluster_TableGetSrv_Handler,
		},
		{
			MethodName: "TableCloseSrv",
			Handler:    _GameCluster_TableCloseSrv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gameCluster.proto",
}
