// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: tableClusterMonitor.proto

package tableMonitor_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TableClusterMonitor_NodeListSrv_FullMethodName   = "/tableMonitor_pb.TableClusterMonitor/NodeListSrv"
	TableClusterMonitor_NodeOpenSrv_FullMethodName   = "/tableMonitor_pb.TableClusterMonitor/NodeOpenSrv"
	TableClusterMonitor_NodeCloseSrv_FullMethodName  = "/tableMonitor_pb.TableClusterMonitor/NodeCloseSrv"
	TableClusterMonitor_TableCountSrv_FullMethodName = "/tableMonitor_pb.TableClusterMonitor/TableCountSrv"
	TableClusterMonitor_TableListSrv_FullMethodName  = "/tableMonitor_pb.TableClusterMonitor/TableListSrv"
	TableClusterMonitor_TableGetSrv_FullMethodName   = "/tableMonitor_pb.TableClusterMonitor/TableGetSrv"
	TableClusterMonitor_TableCloseSrv_FullMethodName = "/tableMonitor_pb.TableClusterMonitor/TableCloseSrv"
)

// TableClusterMonitorClient is the client API for TableClusterMonitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TableClusterMonitorClient interface {
	NodeListSrv(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeList, error)
	NodeOpenSrv(ctx context.Context, in *NodeNameReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NodeCloseSrv(ctx context.Context, in *NodeNameReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TableCountSrv(ctx context.Context, in *TableQueryReq, opts ...grpc.CallOption) (*TableCount, error)
	TableListSrv(ctx context.Context, in *TableQueryReq, opts ...grpc.CallOption) (*TableList, error)
	TableGetSrv(ctx context.Context, in *TableIdReq, opts ...grpc.CallOption) (*TableGetVO, error)
	TableCloseSrv(ctx context.Context, in *TableIdReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type tableClusterMonitorClient struct {
	cc grpc.ClientConnInterface
}

func NewTableClusterMonitorClient(cc grpc.ClientConnInterface) TableClusterMonitorClient {
	return &tableClusterMonitorClient{cc}
}

func (c *tableClusterMonitorClient) NodeListSrv(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeList, error) {
	out := new(NodeList)
	err := c.cc.Invoke(ctx, TableClusterMonitor_NodeListSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClusterMonitorClient) NodeOpenSrv(ctx context.Context, in *NodeNameReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TableClusterMonitor_NodeOpenSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClusterMonitorClient) NodeCloseSrv(ctx context.Context, in *NodeNameReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TableClusterMonitor_NodeCloseSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClusterMonitorClient) TableCountSrv(ctx context.Context, in *TableQueryReq, opts ...grpc.CallOption) (*TableCount, error) {
	out := new(TableCount)
	err := c.cc.Invoke(ctx, TableClusterMonitor_TableCountSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClusterMonitorClient) TableListSrv(ctx context.Context, in *TableQueryReq, opts ...grpc.CallOption) (*TableList, error) {
	out := new(TableList)
	err := c.cc.Invoke(ctx, TableClusterMonitor_TableListSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClusterMonitorClient) TableGetSrv(ctx context.Context, in *TableIdReq, opts ...grpc.CallOption) (*TableGetVO, error) {
	out := new(TableGetVO)
	err := c.cc.Invoke(ctx, TableClusterMonitor_TableGetSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClusterMonitorClient) TableCloseSrv(ctx context.Context, in *TableIdReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TableClusterMonitor_TableCloseSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TableClusterMonitorServer is the server API for TableClusterMonitor service.
// All implementations must embed UnimplementedTableClusterMonitorServer
// for forward compatibility
type TableClusterMonitorServer interface {
	NodeListSrv(context.Context, *emptypb.Empty) (*NodeList, error)
	NodeOpenSrv(context.Context, *NodeNameReq) (*emptypb.Empty, error)
	NodeCloseSrv(context.Context, *NodeNameReq) (*emptypb.Empty, error)
	TableCountSrv(context.Context, *TableQueryReq) (*TableCount, error)
	TableListSrv(context.Context, *TableQueryReq) (*TableList, error)
	TableGetSrv(context.Context, *TableIdReq) (*TableGetVO, error)
	TableCloseSrv(context.Context, *TableIdReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedTableClusterMonitorServer()
}

// UnimplementedTableClusterMonitorServer must be embedded to have forward compatible implementations.
type UnimplementedTableClusterMonitorServer struct {
}

func (UnimplementedTableClusterMonitorServer) NodeListSrv(context.Context, *emptypb.Empty) (*NodeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeListSrv not implemented")
}
func (UnimplementedTableClusterMonitorServer) NodeOpenSrv(context.Context, *NodeNameReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeOpenSrv not implemented")
}
func (UnimplementedTableClusterMonitorServer) NodeCloseSrv(context.Context, *NodeNameReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeCloseSrv not implemented")
}
func (UnimplementedTableClusterMonitorServer) TableCountSrv(context.Context, *TableQueryReq) (*TableCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableCountSrv not implemented")
}
func (UnimplementedTableClusterMonitorServer) TableListSrv(context.Context, *TableQueryReq) (*TableList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableListSrv not implemented")
}
func (UnimplementedTableClusterMonitorServer) TableGetSrv(context.Context, *TableIdReq) (*TableGetVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableGetSrv not implemented")
}
func (UnimplementedTableClusterMonitorServer) TableCloseSrv(context.Context, *TableIdReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableCloseSrv not implemented")
}
func (UnimplementedTableClusterMonitorServer) mustEmbedUnimplementedTableClusterMonitorServer() {}

// UnsafeTableClusterMonitorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TableClusterMonitorServer will
// result in compilation errors.
type UnsafeTableClusterMonitorServer interface {
	mustEmbedUnimplementedTableClusterMonitorServer()
}

func RegisterTableClusterMonitorServer(s grpc.ServiceRegistrar, srv TableClusterMonitorServer) {
	s.RegisterService(&TableClusterMonitor_ServiceDesc, srv)
}

func _TableClusterMonitor_NodeListSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableClusterMonitorServer).NodeListSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TableClusterMonitor_NodeListSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableClusterMonitorServer).NodeListSrv(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableClusterMonitor_NodeOpenSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableClusterMonitorServer).NodeOpenSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TableClusterMonitor_NodeOpenSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableClusterMonitorServer).NodeOpenSrv(ctx, req.(*NodeNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableClusterMonitor_NodeCloseSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableClusterMonitorServer).NodeCloseSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TableClusterMonitor_NodeCloseSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableClusterMonitorServer).NodeCloseSrv(ctx, req.(*NodeNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableClusterMonitor_TableCountSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableClusterMonitorServer).TableCountSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TableClusterMonitor_TableCountSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableClusterMonitorServer).TableCountSrv(ctx, req.(*TableQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableClusterMonitor_TableListSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableClusterMonitorServer).TableListSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TableClusterMonitor_TableListSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableClusterMonitorServer).TableListSrv(ctx, req.(*TableQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableClusterMonitor_TableGetSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableClusterMonitorServer).TableGetSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TableClusterMonitor_TableGetSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableClusterMonitorServer).TableGetSrv(ctx, req.(*TableIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableClusterMonitor_TableCloseSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableClusterMonitorServer).TableCloseSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TableClusterMonitor_TableCloseSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableClusterMonitorServer).TableCloseSrv(ctx, req.(*TableIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TableClusterMonitor_ServiceDesc is the grpc.ServiceDesc for TableClusterMonitor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TableClusterMonitor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tableMonitor_pb.TableClusterMonitor",
	HandlerType: (*TableClusterMonitorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NodeListSrv",
			Handler:    _TableClusterMonitor_NodeListSrv_Handler,
		},
		{
			MethodName: "NodeOpenSrv",
			Handler:    _TableClusterMonitor_NodeOpenSrv_Handler,
		},
		{
			MethodName: "NodeCloseSrv",
			Handler:    _TableClusterMonitor_NodeCloseSrv_Handler,
		},
		{
			MethodName: "TableCountSrv",
			Handler:    _TableClusterMonitor_TableCountSrv_Handler,
		},
		{
			MethodName: "TableListSrv",
			Handler:    _TableClusterMonitor_TableListSrv_Handler,
		},
		{
			MethodName: "TableGetSrv",
			Handler:    _TableClusterMonitor_TableGetSrv_Handler,
		},
		{
			MethodName: "TableCloseSrv",
			Handler:    _TableClusterMonitor_TableCloseSrv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tableClusterMonitor.proto",
}
