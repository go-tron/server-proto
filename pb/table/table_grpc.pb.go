// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: table.proto

package table_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	control "github.com/go-tron/server-proto/pb/control"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Table_ClientCmdSrv_FullMethodName = "/table_pb.Table/ClientCmdSrv"
	Table_CreateSrv_FullMethodName    = "/table_pb.Table/CreateSrv"
	Table_AssignSrv_FullMethodName    = "/table_pb.Table/AssignSrv"
	Table_ForceJoinSrv_FullMethodName = "/table_pb.Table/ForceJoinSrv"
)

// TableClient is the client API for Table service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TableClient interface {
	ClientCmdSrv(ctx context.Context, in *TableMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateSrv(ctx context.Context, in *control.TableConfig, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AssignSrv(ctx context.Context, in *control.AssignTable, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ForceJoinSrv(ctx context.Context, in *control.ForceJoinTable, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type tableClient struct {
	cc grpc.ClientConnInterface
}

func NewTableClient(cc grpc.ClientConnInterface) TableClient {
	return &tableClient{cc}
}

func (c *tableClient) ClientCmdSrv(ctx context.Context, in *TableMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Table_ClientCmdSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) CreateSrv(ctx context.Context, in *control.TableConfig, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Table_CreateSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) AssignSrv(ctx context.Context, in *control.AssignTable, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Table_AssignSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) ForceJoinSrv(ctx context.Context, in *control.ForceJoinTable, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Table_ForceJoinSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TableServer is the server API for Table service.
// All implementations must embed UnimplementedTableServer
// for forward compatibility
type TableServer interface {
	ClientCmdSrv(context.Context, *TableMessage) (*emptypb.Empty, error)
	CreateSrv(context.Context, *control.TableConfig) (*emptypb.Empty, error)
	AssignSrv(context.Context, *control.AssignTable) (*emptypb.Empty, error)
	ForceJoinSrv(context.Context, *control.ForceJoinTable) (*emptypb.Empty, error)
	mustEmbedUnimplementedTableServer()
}

// UnimplementedTableServer must be embedded to have forward compatible implementations.
type UnimplementedTableServer struct {
}

func (UnimplementedTableServer) ClientCmdSrv(context.Context, *TableMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientCmdSrv not implemented")
}
func (UnimplementedTableServer) CreateSrv(context.Context, *control.TableConfig) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSrv not implemented")
}
func (UnimplementedTableServer) AssignSrv(context.Context, *control.AssignTable) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignSrv not implemented")
}
func (UnimplementedTableServer) ForceJoinSrv(context.Context, *control.ForceJoinTable) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceJoinSrv not implemented")
}
func (UnimplementedTableServer) mustEmbedUnimplementedTableServer() {}

// UnsafeTableServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TableServer will
// result in compilation errors.
type UnsafeTableServer interface {
	mustEmbedUnimplementedTableServer()
}

func RegisterTableServer(s grpc.ServiceRegistrar, srv TableServer) {
	s.RegisterService(&Table_ServiceDesc, srv)
}

func _Table_ClientCmdSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).ClientCmdSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Table_ClientCmdSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).ClientCmdSrv(ctx, req.(*TableMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_CreateSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(control.TableConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).CreateSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Table_CreateSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).CreateSrv(ctx, req.(*control.TableConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_AssignSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(control.AssignTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).AssignSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Table_AssignSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).AssignSrv(ctx, req.(*control.AssignTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_ForceJoinSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(control.ForceJoinTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).ForceJoinSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Table_ForceJoinSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).ForceJoinSrv(ctx, req.(*control.ForceJoinTable))
	}
	return interceptor(ctx, in, info, handler)
}

// Table_ServiceDesc is the grpc.ServiceDesc for Table service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Table_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "table_pb.Table",
	HandlerType: (*TableServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientCmdSrv",
			Handler:    _Table_ClientCmdSrv_Handler,
		},
		{
			MethodName: "CreateSrv",
			Handler:    _Table_CreateSrv_Handler,
		},
		{
			MethodName: "AssignSrv",
			Handler:    _Table_AssignSrv_Handler,
		},
		{
			MethodName: "ForceJoinSrv",
			Handler:    _Table_ForceJoinSrv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "table.proto",
}
