// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: table.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeckStatus int32

const (
	DeckStatus_DeckStatusUnspecified DeckStatus = 0
	DeckStatus_DeckStatusStarted     DeckStatus = 2 //已开局
	DeckStatus_DeckStatusCallRate    DeckStatus = 3 //叫分中
	DeckStatus_DeckStatusCallDouble  DeckStatus = 4 //叫加倍中
	DeckStatus_DeckStatusPlaying     DeckStatus = 5 //出牌中
	DeckStatus_DeckStatusEnd         DeckStatus = 6 //结束
)

// Enum value maps for DeckStatus.
var (
	DeckStatus_name = map[int32]string{
		0: "DeckStatusUnspecified",
		2: "DeckStatusStarted",
		3: "DeckStatusCallRate",
		4: "DeckStatusCallDouble",
		5: "DeckStatusPlaying",
		6: "DeckStatusEnd",
	}
	DeckStatus_value = map[string]int32{
		"DeckStatusUnspecified": 0,
		"DeckStatusStarted":     2,
		"DeckStatusCallRate":    3,
		"DeckStatusCallDouble":  4,
		"DeckStatusPlaying":     5,
		"DeckStatusEnd":         6,
	}
)

func (x DeckStatus) Enum() *DeckStatus {
	p := new(DeckStatus)
	*p = x
	return p
}

func (x DeckStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeckStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_table_proto_enumTypes[0].Descriptor()
}

func (DeckStatus) Type() protoreflect.EnumType {
	return &file_table_proto_enumTypes[0]
}

func (x DeckStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeckStatus.Descriptor instead.
func (DeckStatus) EnumDescriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{0}
}

type TableCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64 `protobuf:"varint,1,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *TableCount) Reset() {
	*x = TableCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableCount) ProtoMessage() {}

func (x *TableCount) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableCount.ProtoReflect.Descriptor instead.
func (*TableCount) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{0}
}

func (x *TableCount) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type TableList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tables []*TableListVO `protobuf:"bytes,1,rep,name=Tables,proto3" json:"Tables,omitempty"`
}

func (x *TableList) Reset() {
	*x = TableList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableList) ProtoMessage() {}

func (x *TableList) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableList.ProtoReflect.Descriptor instead.
func (*TableList) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{1}
}

func (x *TableList) GetTables() []*TableListVO {
	if x != nil {
		return x.Tables
	}
	return nil
}

type TableIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId int64 `protobuf:"varint,1,opt,name=TableId,proto3" json:"TableId,omitempty"`
}

func (x *TableIdReq) Reset() {
	*x = TableIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableIdReq) ProtoMessage() {}

func (x *TableIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableIdReq.ProtoReflect.Descriptor instead.
func (*TableIdReq) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{2}
}

func (x *TableIdReq) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

type TableQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName string `protobuf:"bytes,1,opt,name=NodeName,proto3" json:"NodeName,omitempty"`
	GameId   int64  `protobuf:"varint,2,opt,name=GameId,proto3" json:"GameId,omitempty"`
}

func (x *TableQueryReq) Reset() {
	*x = TableQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableQueryReq) ProtoMessage() {}

func (x *TableQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableQueryReq.ProtoReflect.Descriptor instead.
func (*TableQueryReq) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{3}
}

func (x *TableQueryReq) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *TableQueryReq) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

type GamePlay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User  int64  `protobuf:"varint,1,opt,name=User,proto3" json:"User,omitempty"`
	Cards string `protobuf:"bytes,2,opt,name=Cards,proto3" json:"Cards,omitempty"`
}

func (x *GamePlay) Reset() {
	*x = GamePlay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlay) ProtoMessage() {}

func (x *GamePlay) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlay.ProtoReflect.Descriptor instead.
func (*GamePlay) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{4}
}

func (x *GamePlay) GetUser() int64 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *GamePlay) GetCards() string {
	if x != nil {
		return x.Cards
	}
	return ""
}

type Sequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    string `protobuf:"bytes,1,opt,name=Time,proto3" json:"Time,omitempty"`
	User    int64  `protobuf:"varint,2,opt,name=User,proto3" json:"User,omitempty"`
	Action  Action `protobuf:"varint,3,opt,name=Action,proto3,enum=Action" json:"Action,omitempty"`
	Timeout int64  `protobuf:"varint,4,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	Reacted bool   `protobuf:"varint,5,opt,name=Reacted,proto3" json:"Reacted,omitempty"`
}

func (x *Sequence) Reset() {
	*x = Sequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sequence) ProtoMessage() {}

func (x *Sequence) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sequence.ProtoReflect.Descriptor instead.
func (*Sequence) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{5}
}

func (x *Sequence) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *Sequence) GetUser() int64 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *Sequence) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ActionUnspecified
}

func (x *Sequence) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Sequence) GetReacted() bool {
	if x != nil {
		return x.Reacted
	}
	return false
}

type UserVO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Robot          bool   `protobuf:"varint,1,opt,name=Robot,proto3" json:"Robot,omitempty"`
	UserId         int64  `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	UserNo         string `protobuf:"bytes,3,opt,name=UserNo,proto3" json:"UserNo,omitempty"`
	Nickname       string `protobuf:"bytes,4,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	Avatar         string `protobuf:"bytes,5,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	Gender         uint32 `protobuf:"varint,6,opt,name=Gender,proto3" json:"Gender,omitempty"`
	Seat           uint32 `protobuf:"varint,8,opt,name=Seat,proto3" json:"Seat,omitempty"`
	Joined         bool   `protobuf:"varint,9,opt,name=Joined,proto3" json:"Joined,omitempty"`
	Ready          bool   `protobuf:"varint,10,opt,name=Ready,proto3" json:"Ready,omitempty"`
	Online         bool   `protobuf:"varint,11,opt,name=Online,proto3" json:"Online,omitempty"`
	Leaved         bool   `protobuf:"varint,12,opt,name=Leaved,proto3" json:"Leaved,omitempty"`
	Hosted         bool   `protobuf:"varint,13,opt,name=Hosted,proto3" json:"Hosted,omitempty"`
	Score          int32  `protobuf:"varint,14,opt,name=Score,proto3" json:"Score,omitempty"`
	Rank           int32  `protobuf:"varint,15,opt,name=Rank,proto3" json:"Rank,omitempty"`
	Entered        bool   `protobuf:"varint,16,opt,name=Entered,proto3" json:"Entered,omitempty"`
	Landlord       bool   `protobuf:"varint,17,opt,name=Landlord,proto3" json:"Landlord,omitempty"`
	DeckScore      int32  `protobuf:"varint,18,opt,name=DeckScore,proto3" json:"DeckScore,omitempty"`
	TableScore     int32  `protobuf:"varint,20,opt,name=TableScore,proto3" json:"TableScore,omitempty"`
	BaseRate       uint32 `protobuf:"varint,21,opt,name=BaseRate,proto3" json:"BaseRate,omitempty"`
	BaseRateCalled bool   `protobuf:"varint,22,opt,name=BaseRateCalled,proto3" json:"BaseRateCalled,omitempty"`
	Double         uint32 `protobuf:"varint,23,opt,name=Double,proto3" json:"Double,omitempty"`
	DoubleRate     uint32 `protobuf:"varint,24,opt,name=DoubleRate,proto3" json:"DoubleRate,omitempty"`
	DoubleCalled   bool   `protobuf:"varint,25,opt,name=DoubleCalled,proto3" json:"DoubleCalled,omitempty"`
	Rate           uint32 `protobuf:"varint,26,opt,name=Rate,proto3" json:"Rate,omitempty"`
	Winner         bool   `protobuf:"varint,27,opt,name=Winner,proto3" json:"Winner,omitempty"`
	Cards          string `protobuf:"bytes,28,opt,name=Cards,proto3" json:"Cards,omitempty"`
	CardSetList    string `protobuf:"bytes,29,opt,name=CardSetList,proto3" json:"CardSetList,omitempty"`
	HoldingCards   string `protobuf:"bytes,30,opt,name=HoldingCards,proto3" json:"HoldingCards,omitempty"`
	PlayedHands    uint32 `protobuf:"varint,31,opt,name=PlayedHands,proto3" json:"PlayedHands,omitempty"`
	LastCards      string `protobuf:"bytes,32,opt,name=LastCards,proto3" json:"LastCards,omitempty"`
	VoteState      uint32 `protobuf:"varint,33,opt,name=VoteState,proto3" json:"VoteState,omitempty"`
}

func (x *UserVO) Reset() {
	*x = UserVO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserVO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserVO) ProtoMessage() {}

func (x *UserVO) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserVO.ProtoReflect.Descriptor instead.
func (*UserVO) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{6}
}

func (x *UserVO) GetRobot() bool {
	if x != nil {
		return x.Robot
	}
	return false
}

func (x *UserVO) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserVO) GetUserNo() string {
	if x != nil {
		return x.UserNo
	}
	return ""
}

func (x *UserVO) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserVO) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserVO) GetGender() uint32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *UserVO) GetSeat() uint32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *UserVO) GetJoined() bool {
	if x != nil {
		return x.Joined
	}
	return false
}

func (x *UserVO) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *UserVO) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *UserVO) GetLeaved() bool {
	if x != nil {
		return x.Leaved
	}
	return false
}

func (x *UserVO) GetHosted() bool {
	if x != nil {
		return x.Hosted
	}
	return false
}

func (x *UserVO) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *UserVO) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *UserVO) GetEntered() bool {
	if x != nil {
		return x.Entered
	}
	return false
}

func (x *UserVO) GetLandlord() bool {
	if x != nil {
		return x.Landlord
	}
	return false
}

func (x *UserVO) GetDeckScore() int32 {
	if x != nil {
		return x.DeckScore
	}
	return 0
}

func (x *UserVO) GetTableScore() int32 {
	if x != nil {
		return x.TableScore
	}
	return 0
}

func (x *UserVO) GetBaseRate() uint32 {
	if x != nil {
		return x.BaseRate
	}
	return 0
}

func (x *UserVO) GetBaseRateCalled() bool {
	if x != nil {
		return x.BaseRateCalled
	}
	return false
}

func (x *UserVO) GetDouble() uint32 {
	if x != nil {
		return x.Double
	}
	return 0
}

func (x *UserVO) GetDoubleRate() uint32 {
	if x != nil {
		return x.DoubleRate
	}
	return 0
}

func (x *UserVO) GetDoubleCalled() bool {
	if x != nil {
		return x.DoubleCalled
	}
	return false
}

func (x *UserVO) GetRate() uint32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *UserVO) GetWinner() bool {
	if x != nil {
		return x.Winner
	}
	return false
}

func (x *UserVO) GetCards() string {
	if x != nil {
		return x.Cards
	}
	return ""
}

func (x *UserVO) GetCardSetList() string {
	if x != nil {
		return x.CardSetList
	}
	return ""
}

func (x *UserVO) GetHoldingCards() string {
	if x != nil {
		return x.HoldingCards
	}
	return ""
}

func (x *UserVO) GetPlayedHands() uint32 {
	if x != nil {
		return x.PlayedHands
	}
	return 0
}

func (x *UserVO) GetLastCards() string {
	if x != nil {
		return x.LastCards
	}
	return ""
}

func (x *UserVO) GetVoteState() uint32 {
	if x != nil {
		return x.VoteState
	}
	return 0
}

type DeckRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	User       int64  `protobuf:"varint,2,opt,name=User,proto3" json:"User,omitempty"`
	Cards      string `protobuf:"bytes,3,opt,name=Cards,proto3" json:"Cards,omitempty"`
	Landlord   bool   `protobuf:"varint,4,opt,name=Landlord,proto3" json:"Landlord,omitempty"`
	Win        bool   `protobuf:"varint,5,opt,name=win,proto3" json:"win,omitempty"`
	Score      int32  `protobuf:"varint,6,opt,name=Score,proto3" json:"Score,omitempty"`
	StartScore int32  `protobuf:"varint,7,opt,name=StartScore,proto3" json:"StartScore,omitempty"`
	EndScore   int32  `protobuf:"varint,8,opt,name=EndScore,proto3" json:"EndScore,omitempty"`
}

func (x *DeckRecord) Reset() {
	*x = DeckRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeckRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeckRecord) ProtoMessage() {}

func (x *DeckRecord) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeckRecord.ProtoReflect.Descriptor instead.
func (*DeckRecord) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{7}
}

func (x *DeckRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeckRecord) GetUser() int64 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *DeckRecord) GetCards() string {
	if x != nil {
		return x.Cards
	}
	return ""
}

func (x *DeckRecord) GetLandlord() bool {
	if x != nil {
		return x.Landlord
	}
	return false
}

func (x *DeckRecord) GetWin() bool {
	if x != nil {
		return x.Win
	}
	return false
}

func (x *DeckRecord) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *DeckRecord) GetStartScore() int32 {
	if x != nil {
		return x.StartScore
	}
	return 0
}

func (x *DeckRecord) GetEndScore() int32 {
	if x != nil {
		return x.EndScore
	}
	return 0
}

type DeckVO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckId          int64         `protobuf:"varint,3,opt,name=DeckId,proto3" json:"DeckId,omitempty"`
	DeckNo          uint32        `protobuf:"varint,4,opt,name=DeckNo,proto3" json:"DeckNo,omitempty"`
	StartAt         string        `protobuf:"bytes,5,opt,name=StartAt,proto3" json:"StartAt,omitempty"`
	EndAt           string        `protobuf:"bytes,6,opt,name=EndAt,proto3" json:"EndAt,omitempty"`
	DeckRecords     []*DeckRecord `protobuf:"bytes,7,rep,name=DeckRecords,proto3" json:"DeckRecords,omitempty"`
	DeckStatus      DeckStatus    `protobuf:"varint,8,opt,name=DeckStatus,proto3,enum=game.server.DeckStatus" json:"DeckStatus,omitempty"`
	RateCalledTimes uint32        `protobuf:"varint,9,opt,name=RateCalledTimes,proto3" json:"RateCalledTimes,omitempty"`
	CurrentUser     int64         `protobuf:"varint,10,opt,name=CurrentUser,proto3" json:"CurrentUser,omitempty"`
	NextUser        int64         `protobuf:"varint,11,opt,name=NextUser,proto3" json:"NextUser,omitempty"`
	Cards           string        `protobuf:"bytes,12,opt,name=Cards,proto3" json:"Cards,omitempty"`
	HoldingCards    string        `protobuf:"bytes,13,opt,name=HoldingCards,proto3" json:"HoldingCards,omitempty"`
	PlayedCards     string        `protobuf:"bytes,14,opt,name=PlayedCards,proto3" json:"PlayedCards,omitempty"`
	HoleCards       string        `protobuf:"bytes,15,opt,name=HoleCards,proto3" json:"HoleCards,omitempty"`
	LastPlay        *GamePlay     `protobuf:"bytes,16,opt,name=LastPlay,proto3" json:"LastPlay,omitempty"`
	Caller          int64         `protobuf:"varint,17,opt,name=Caller,proto3" json:"Caller,omitempty"`
	Landlord        int64         `protobuf:"varint,18,opt,name=Landlord,proto3" json:"Landlord,omitempty"`
	BombCount       uint32        `protobuf:"varint,19,opt,name=BombCount,proto3" json:"BombCount,omitempty"`
	Spring          uint32        `protobuf:"varint,20,opt,name=Spring,proto3" json:"Spring,omitempty"`
	RateDetails     *RateDetails  `protobuf:"bytes,21,opt,name=RateDetails,proto3" json:"RateDetails,omitempty"`
	SequenceList    []*Sequence   `protobuf:"bytes,22,rep,name=SequenceList,proto3" json:"SequenceList,omitempty"`
}

func (x *DeckVO) Reset() {
	*x = DeckVO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeckVO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeckVO) ProtoMessage() {}

func (x *DeckVO) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeckVO.ProtoReflect.Descriptor instead.
func (*DeckVO) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{8}
}

func (x *DeckVO) GetDeckId() int64 {
	if x != nil {
		return x.DeckId
	}
	return 0
}

func (x *DeckVO) GetDeckNo() uint32 {
	if x != nil {
		return x.DeckNo
	}
	return 0
}

func (x *DeckVO) GetStartAt() string {
	if x != nil {
		return x.StartAt
	}
	return ""
}

func (x *DeckVO) GetEndAt() string {
	if x != nil {
		return x.EndAt
	}
	return ""
}

func (x *DeckVO) GetDeckRecords() []*DeckRecord {
	if x != nil {
		return x.DeckRecords
	}
	return nil
}

func (x *DeckVO) GetDeckStatus() DeckStatus {
	if x != nil {
		return x.DeckStatus
	}
	return DeckStatus_DeckStatusUnspecified
}

func (x *DeckVO) GetRateCalledTimes() uint32 {
	if x != nil {
		return x.RateCalledTimes
	}
	return 0
}

func (x *DeckVO) GetCurrentUser() int64 {
	if x != nil {
		return x.CurrentUser
	}
	return 0
}

func (x *DeckVO) GetNextUser() int64 {
	if x != nil {
		return x.NextUser
	}
	return 0
}

func (x *DeckVO) GetCards() string {
	if x != nil {
		return x.Cards
	}
	return ""
}

func (x *DeckVO) GetHoldingCards() string {
	if x != nil {
		return x.HoldingCards
	}
	return ""
}

func (x *DeckVO) GetPlayedCards() string {
	if x != nil {
		return x.PlayedCards
	}
	return ""
}

func (x *DeckVO) GetHoleCards() string {
	if x != nil {
		return x.HoleCards
	}
	return ""
}

func (x *DeckVO) GetLastPlay() *GamePlay {
	if x != nil {
		return x.LastPlay
	}
	return nil
}

func (x *DeckVO) GetCaller() int64 {
	if x != nil {
		return x.Caller
	}
	return 0
}

func (x *DeckVO) GetLandlord() int64 {
	if x != nil {
		return x.Landlord
	}
	return 0
}

func (x *DeckVO) GetBombCount() uint32 {
	if x != nil {
		return x.BombCount
	}
	return 0
}

func (x *DeckVO) GetSpring() uint32 {
	if x != nil {
		return x.Spring
	}
	return 0
}

func (x *DeckVO) GetRateDetails() *RateDetails {
	if x != nil {
		return x.RateDetails
	}
	return nil
}

func (x *DeckVO) GetSequenceList() []*Sequence {
	if x != nil {
		return x.SequenceList
	}
	return nil
}

type TableVO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName    string       `protobuf:"bytes,1,opt,name=NodeName,proto3" json:"NodeName,omitempty"`
	Config      *TableConfig `protobuf:"bytes,2,opt,name=Config,proto3" json:"Config,omitempty"`
	CreatedAt   string       `protobuf:"bytes,3,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Lifetime    uint64       `protobuf:"varint,4,opt,name=Lifetime,proto3" json:"Lifetime,omitempty"` //存在时间
	TableStatus TableStatus  `protobuf:"varint,5,opt,name=TableStatus,proto3,enum=TableStatus" json:"TableStatus,omitempty"`
	StartAt     string       `protobuf:"bytes,6,opt,name=StartAt,proto3" json:"StartAt,omitempty"`
	DeckNo      uint32       `protobuf:"varint,7,opt,name=DeckNo,proto3" json:"DeckNo,omitempty"`
	Users       []*UserVO    `protobuf:"bytes,8,rep,name=Users,proto3" json:"Users,omitempty"`
	Decks       []*DeckVO    `protobuf:"bytes,9,rep,name=Decks,proto3" json:"Decks,omitempty"`
}

func (x *TableVO) Reset() {
	*x = TableVO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableVO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableVO) ProtoMessage() {}

func (x *TableVO) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableVO.ProtoReflect.Descriptor instead.
func (*TableVO) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{9}
}

func (x *TableVO) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *TableVO) GetConfig() *TableConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TableVO) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TableVO) GetLifetime() uint64 {
	if x != nil {
		return x.Lifetime
	}
	return 0
}

func (x *TableVO) GetTableStatus() TableStatus {
	if x != nil {
		return x.TableStatus
	}
	return TableStatus_TableStatusUnspecified
}

func (x *TableVO) GetStartAt() string {
	if x != nil {
		return x.StartAt
	}
	return ""
}

func (x *TableVO) GetDeckNo() uint32 {
	if x != nil {
		return x.DeckNo
	}
	return 0
}

func (x *TableVO) GetUsers() []*UserVO {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *TableVO) GetDecks() []*DeckVO {
	if x != nil {
		return x.Decks
	}
	return nil
}

type TableListVO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName     string       `protobuf:"bytes,1,opt,name=NodeName,proto3" json:"NodeName,omitempty"`
	GameId       int64        `protobuf:"varint,2,opt,name=GameId,proto3" json:"GameId,omitempty"`                               //游戏ID
	TableId      int64        `protobuf:"varint,3,opt,name=TableId,proto3" json:"TableId,omitempty"`                             //牌桌ID
	RoundId      int64        `protobuf:"varint,4,opt,name=RoundId,proto3" json:"RoundId,omitempty"`                             //轮次ID
	GameType     GameType     `protobuf:"varint,5,opt,name=GameType,proto3,enum=GameType" json:"GameType,omitempty"`             //游戏类型
	GameCategory GameCategory `protobuf:"varint,6,opt,name=GameCategory,proto3,enum=GameCategory" json:"GameCategory,omitempty"` //游戏类别
	Title        string       `protobuf:"bytes,7,opt,name=Title,proto3" json:"Title,omitempty"`                                  //游戏标题
	CreatedAt    string       `protobuf:"bytes,8,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Lifetime     uint64       `protobuf:"varint,9,opt,name=Lifetime,proto3" json:"Lifetime,omitempty"` //存在时间
	TableStatus  TableStatus  `protobuf:"varint,10,opt,name=TableStatus,proto3,enum=TableStatus" json:"TableStatus,omitempty"`
	StartAt      string       `protobuf:"bytes,11,opt,name=StartAt,proto3" json:"StartAt,omitempty"`
	DeckNo       uint32       `protobuf:"varint,12,opt,name=DeckNo,proto3" json:"DeckNo,omitempty"`
	Users        []int64      `protobuf:"varint,13,rep,packed,name=Users,proto3" json:"Users,omitempty"`
}

func (x *TableListVO) Reset() {
	*x = TableListVO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_table_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableListVO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableListVO) ProtoMessage() {}

func (x *TableListVO) ProtoReflect() protoreflect.Message {
	mi := &file_table_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableListVO.ProtoReflect.Descriptor instead.
func (*TableListVO) Descriptor() ([]byte, []int) {
	return file_table_proto_rawDescGZIP(), []int{10}
}

func (x *TableListVO) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *TableListVO) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *TableListVO) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *TableListVO) GetRoundId() int64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *TableListVO) GetGameType() GameType {
	if x != nil {
		return x.GameType
	}
	return GameType_GameTypeUnspecified
}

func (x *TableListVO) GetGameCategory() GameCategory {
	if x != nil {
		return x.GameCategory
	}
	return GameCategory_GameCategoryUnspecified
}

func (x *TableListVO) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TableListVO) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TableListVO) GetLifetime() uint64 {
	if x != nil {
		return x.Lifetime
	}
	return 0
}

func (x *TableListVO) GetTableStatus() TableStatus {
	if x != nil {
		return x.TableStatus
	}
	return TableStatus_TableStatusUnspecified
}

func (x *TableListVO) GetStartAt() string {
	if x != nil {
		return x.StartAt
	}
	return ""
}

func (x *TableListVO) GetDeckNo() uint32 {
	if x != nil {
		return x.DeckNo
	}
	return 0
}

func (x *TableListVO) GetUsers() []int64 {
	if x != nil {
		return x.Users
	}
	return nil
}

var File_table_proto protoreflect.FileDescriptor

var file_table_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x0a, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x22, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x3d, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4f, 0x52, 0x06, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x26, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x43, 0x0a,
	0x0d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1a,
	0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x22, 0x34, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x61, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x65, 0x64, 0x22, 0xc8, 0x06, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x56, 0x4f, 0x12, 0x14, 0x0a,
	0x05, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x52, 0x6f,
	0x62, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x65, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x53,
	0x65, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x52,
	0x61, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x4c, 0x61, 0x6e, 0x64, 0x6c, 0x6f, 0x72, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x4c, 0x61, 0x6e, 0x64, 0x6c, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x63,
	0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x44, 0x65,
	0x63, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x57,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x57, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x72,
	0x64, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x48,
	0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x48, 0x61, 0x6e, 0x64,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xc6, 0x01,
	0x0a, 0x0a, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x64, 0x6c, 0x6f,
	0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x64, 0x6c, 0x6f,
	0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x77, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x6e,
	0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x45, 0x6e,
	0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xc6, 0x05, 0x0a, 0x06, 0x44, 0x65, 0x63, 0x6b, 0x56,
	0x4f, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x44, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x65, 0x63,
	0x6b, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x44, 0x65, 0x63, 0x6b, 0x4e,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x6e, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0b, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x0b, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x0a,
	0x44, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x44, 0x65, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x52, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x65, 0x78, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x4e, 0x65, 0x78, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x48, 0x6f, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x6f, 0x6c,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x6f,
	0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x43, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x64, 0x6c, 0x6f, 0x72, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x64, 0x6c, 0x6f, 0x72, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x42, 0x6f, 0x6d, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x42, 0x6f, 0x6d, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x70, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x53, 0x70,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x0b, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x52, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0b, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x0c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xbd, 0x02, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x4f, 0x12, 0x1a, 0x0a, 0x08, 0x4e,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x4c,
	0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x44, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x12, 0x29, 0x0a, 0x05, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x4f, 0x52, 0x05, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x56, 0x4f, 0x52, 0x05, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x22,
	0x97, 0x03, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4f, 0x12,
	0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x47, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31,
	0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x44,
	0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x44, 0x65, 0x63,
	0x6b, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x2a, 0x9a, 0x01, 0x0a, 0x0a, 0x44, 0x65,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x65, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x65,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65,
	0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x61, 0x6c, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11,
	0x44, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e,
	0x67, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x6e, 0x64, 0x10, 0x06, 0x32, 0xe0, 0x03, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x3f, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x72, 0x76, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x40, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x72,
	0x76, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x6e, 0x64,
	0x53, 0x72, 0x76, 0x12, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0d, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x72, 0x76, 0x12, 0x1a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12,
	0x44, 0x0a, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x72, 0x76, 0x12,
	0x1a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x65,
	0x74, 0x53, 0x72, 0x76, 0x12, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x56, 0x4f, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x53, 0x72, 0x76, 0x12, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2e, 0x2f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_table_proto_rawDescOnce sync.Once
	file_table_proto_rawDescData = file_table_proto_rawDesc
)

func file_table_proto_rawDescGZIP() []byte {
	file_table_proto_rawDescOnce.Do(func() {
		file_table_proto_rawDescData = protoimpl.X.CompressGZIP(file_table_proto_rawDescData)
	})
	return file_table_proto_rawDescData
}

var file_table_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_table_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_table_proto_goTypes = []interface{}{
	(DeckStatus)(0),       // 0: game.server.DeckStatus
	(*TableCount)(nil),    // 1: game.server.TableCount
	(*TableList)(nil),     // 2: game.server.TableList
	(*TableIdReq)(nil),    // 3: game.server.TableIdReq
	(*TableQueryReq)(nil), // 4: game.server.TableQueryReq
	(*GamePlay)(nil),      // 5: game.server.GamePlay
	(*Sequence)(nil),      // 6: game.server.Sequence
	(*UserVO)(nil),        // 7: game.server.UserVO
	(*DeckRecord)(nil),    // 8: game.server.DeckRecord
	(*DeckVO)(nil),        // 9: game.server.DeckVO
	(*TableVO)(nil),       // 10: game.server.TableVO
	(*TableListVO)(nil),   // 11: game.server.TableListVO
	(Action)(0),           // 12: Action
	(*RateDetails)(nil),   // 13: RateDetails
	(*TableConfig)(nil),   // 14: TableConfig
	(TableStatus)(0),      // 15: TableStatus
	(GameType)(0),         // 16: GameType
	(GameCategory)(0),     // 17: GameCategory
	(*emptypb.Empty)(nil), // 18: google.protobuf.Empty
}
var file_table_proto_depIdxs = []int32{
	11, // 0: game.server.TableList.Tables:type_name -> game.server.TableListVO
	12, // 1: game.server.Sequence.Action:type_name -> Action
	8,  // 2: game.server.DeckVO.DeckRecords:type_name -> game.server.DeckRecord
	0,  // 3: game.server.DeckVO.DeckStatus:type_name -> game.server.DeckStatus
	5,  // 4: game.server.DeckVO.LastPlay:type_name -> game.server.GamePlay
	13, // 5: game.server.DeckVO.RateDetails:type_name -> RateDetails
	6,  // 6: game.server.DeckVO.SequenceList:type_name -> game.server.Sequence
	14, // 7: game.server.TableVO.Config:type_name -> TableConfig
	15, // 8: game.server.TableVO.TableStatus:type_name -> TableStatus
	7,  // 9: game.server.TableVO.Users:type_name -> game.server.UserVO
	9,  // 10: game.server.TableVO.Decks:type_name -> game.server.DeckVO
	16, // 11: game.server.TableListVO.GameType:type_name -> GameType
	17, // 12: game.server.TableListVO.GameCategory:type_name -> GameCategory
	15, // 13: game.server.TableListVO.TableStatus:type_name -> TableStatus
	18, // 14: game.server.Table.NodeOpenSrv:input_type -> google.protobuf.Empty
	18, // 15: game.server.Table.NodeCloseSrv:input_type -> google.protobuf.Empty
	3,  // 16: game.server.Table.TableFindSrv:input_type -> game.server.TableIdReq
	4,  // 17: game.server.Table.TableCountSrv:input_type -> game.server.TableQueryReq
	4,  // 18: game.server.Table.TableListSrv:input_type -> game.server.TableQueryReq
	3,  // 19: game.server.Table.TableGetSrv:input_type -> game.server.TableIdReq
	3,  // 20: game.server.Table.TableCloseSrv:input_type -> game.server.TableIdReq
	18, // 21: game.server.Table.NodeOpenSrv:output_type -> google.protobuf.Empty
	18, // 22: game.server.Table.NodeCloseSrv:output_type -> google.protobuf.Empty
	1,  // 23: game.server.Table.TableFindSrv:output_type -> game.server.TableCount
	1,  // 24: game.server.Table.TableCountSrv:output_type -> game.server.TableCount
	2,  // 25: game.server.Table.TableListSrv:output_type -> game.server.TableList
	10, // 26: game.server.Table.TableGetSrv:output_type -> game.server.TableVO
	18, // 27: game.server.Table.TableCloseSrv:output_type -> google.protobuf.Empty
	21, // [21:28] is the sub-list for method output_type
	14, // [14:21] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_table_proto_init() }
func file_table_proto_init() {
	if File_table_proto != nil {
		return
	}
	file_base_proto_init()
	file_control_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_table_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserVO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeckRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeckVO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableVO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_table_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableListVO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_table_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_table_proto_goTypes,
		DependencyIndexes: file_table_proto_depIdxs,
		EnumInfos:         file_table_proto_enumTypes,
		MessageInfos:      file_table_proto_msgTypes,
	}.Build()
	File_table_proto = out.File
	file_table_proto_rawDesc = nil
	file_table_proto_goTypes = nil
	file_table_proto_depIdxs = nil
}
